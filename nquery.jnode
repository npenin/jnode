var jnodeFolder=__dirname+'/';
var cwd=process.cwd()+'/'
require('./setup.js');
var accept=require('accept/index.js');
var debug=require('debug')('jnode:core');
global.japi=function(req,res)
{
    return function(statusCode, data)
    {
		if(isNaN(statusCode) || Math.floor(statusCode)!=statusCode)
		{
			data=statusCode;
			statusCode=200;
		}
		res.statusCode=statusCode;
		if(typeof(data)=='undefined')
		{
			return res.end();
		}
		var contentType;
		for(var key in japi.keys)
		{
			if(typeof(req.query[key])!='undefined' && req.query[key]==japi.keys[key].value)
			{
				contentType=japi.keys[key].contentType;
			}
		}

		var preferred='text/html';
		if(req.headers['content-type']=='application/json' || req.headers['content-type']=='text/json' || typeof(data)!='string')
			preferred='application/json';
			
		
		var contentType=accept(req.headers.accept, ['application/json', 'text/html'], preferred);
		
		return japi.contentTypes[contentType](req,res,data);
    }
}

japi.on=function(key,value,contentType)
{
	if(typeof(japi.keys)=='undefined')
		japi.keys={};
	japi.keys[key]={ value:value, contentType:contentType };
}

japi.register=function (handler)
{
	for(var i=1;i<arguments.length; i++)
	{
		if(typeof(japi.contentTypes)=='undefined')
			japi.contentTypes={};
		
		var contentType=arguments[i];
		japi.contentTypes[contentType]=
		function(req,res,data){
			res.setHeader('Content-type', contentType);
			switch(handler.length)
			{
				case 1:
					return handler(data);
					break;
				case 2:
					return handler(res,data);
					break;
				default:
					return handler(req,res,data);
					break;
			}			
		}
	}
}

require('./json.mime');
require('./html.mime');

var wrapper=function wrapper(req, res, next){
    $.extend(req, $('url').parse(req.url, true));
    res.send=japi(req,res);
	res.redirect=function(url){
	    this.statusCode=302;
	    this.setHeader('Location', url);
		this.end();
	};
	res.cookie = function(name, val, options){
		res._cookie=res._cookie || [];
		options = $.extend({}, options);
		var secret = req.secret;
		var signed = options.signed;
		if (signed && !secret) 
			throw new Error('connect.cookieParser("secret") required for signed cookies');
		if ('object' == typeof val) val = 'j:' + JSON.stringify(val);
		if (signed) val = 's:' + sign(val, secret);
		if ('maxAge' in options) 
		{
			options.expires = new Date(Date.now() + options.maxAge);
			options.maxAge /= 1000;
		}
		if (null == options.path) 
			options.path = '/';
		
		res._cookie.push($('cookie').serialize(name, String(val), options));
		this.setHeader('Set-Cookie',res._cookie);
		return this;
	};
	debug(req.url);
    next();
}

//process.env.DEBUG='jnode:*,domojs:*';

/* setup connect */
var connect=$('connect');
var app=connect();
// if(process.env.NODE_ENV!='production')
	// app.use($('connect-logger')(process.env.NODE_ENV || 'dev'));
app.use($('cookie-parser')());
app.use($('cookie-session')({secret:'domojs'}));
app.use(wrapper);

$.extend($, app);

/* setup router */
var router= new ($('router'))();

$.rules={};

router.onmount=function(method, pattern, rewrite, fn)
{
	if(typeof($.rules[method]) =='undefined')
		$.rules[method]=[];

	$.rules[method].push({
		pattern:pattern,
		rewrite:rewrite
	});
}
$.extend($, router);

var getRegistration=$.get;
$.get=function(arg1,arg2){
	if(arguments.length==2 && arg2.length==1)
		return $.ajax({type:'GET',url:arg1, success:arg2});
	else
		return getRegistration.apply(this, arguments);
};


rootjQuery.ready=$.ready;
exports.run=function(host, port){
	if(typeof(server)!='undefined')
		return debug('server already running');
    global.server=$('http').createServer(app);
    global.protocol='http';
    global.port=server.port=port;
	if($('fs').existsSync('cert.pfx'))
	{
	    server.listen(port, '127.0.0.1');
	    global.localServer=global.server;
	    global.server=$('https').createServer({pfx:$('fs').readFileSync('cert.pfx'), passphrase:'hRrnhUUZ79VyIFa23XA6'}, app);
	    global.protocol='https';
		server.port=443;
	    server.listen(443, host);
	    debug('Server running at https://'+host+'/');
	}
	else
	    server.listen(port, host);
	server.on('clientError', function(e){ debug(e.message);});
	server.on('connection', function(socket){ socket.on('error', function(e){ debug(e.message); }); });

	server.on('error', function(e) {
		debug('problem with request: ' + e.message);
	});
	server.host=host;
	debug('Server running at http://'+host+':'+port+'/');
}
exports.init=function(config,app)
{
	if(config.useDefaultDocument!==false)
		$.get('/', '/index.html');

	for(var route in config.routes)
	{
		$.get(route, config.routes[route]);
	}
	for(var staticFolder in config["static"])
	{
		$.use(config["static"][staticFolder], connect.static(cwd+staticFolder));
		debug('registered static handler for '+cwd+staticFolder+' at '+config["static"][staticFolder]);
	}
	
    if(!isNaN(config.port))
	    exports.run(config.host, config.port);
    else
        exports.run(config.host, process.env.PORT);
}

var jnodeConfig=cwd+'jnode.config';
if($('fs').existsSync(jnodeConfig))
{
	var config=JSON.parse($('fs').readFileSync(jnodeConfig));
	for(var key in config)
	{
		debug('initializing '+key);
		if(key.substring(0,2)!='./')
			context={request:{url:{pathname:key}}};
		else
			context={request:{url:{pathname:key.substring(1)}}};
			
		var init;
		if(key=='jnode')
			init=exports.init;
		else
			init=$(key).init;
		if(init)
			init(config[key], app);
		debug('initialized '+key);
	}
	context=null;
}

app.use(router);


if(require.main===module)
{
	exports.run('192.168.68.11',81);
}
